<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hippocamplus </title>
    <link>/Hippocamplus/tags/plot/</link>
    <language>en-us</language>
    <author></author>
    <rights>(C) 2017</rights>
    <updated>2017-09-19 00:00:00 &#43;0000 UTC</updated>

    
      
        <item>
          <title>MUMerplots with ggplot2</title>
          <link>/Hippocamplus/2017/09/19/mumerplots-with-ggplot2/</link>
          <pubDate>Tue, 19 Sep 2017 00:00:00 UTC</pubDate>
          <author></author>
          <guid>/Hippocamplus/2017/09/19/mumerplots-with-ggplot2/</guid>
          <description>&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(magrittr)
library(GenomicRanges)
library(knitr)
library(ggplot2)
library(tidyr)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;mumplot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;MUMplot&lt;/h2&gt;
&lt;p&gt;The MUMerplot that I want to reproduce showed three contigs overlapping a region of chr 14. I had filtered the delta file with &lt;code&gt;delta-filter -l 10000 -q -r&lt;/code&gt; to get only the contigs with the best alignments. I had used &lt;code&gt;mummerplot&lt;/code&gt; with the &lt;code&gt;-l&lt;/code&gt; layout option to reorder and orient the sequence to have a nice diagonal.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;FIND OUT THE MUMPLOT COMMAND OR RERUN&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/Hippocamplus/imgs/mumplot-example.png&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;read-a-delta-file&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Read a delta file&lt;/h2&gt;
&lt;p&gt;The delta file is the default output of the &lt;a href=&#34;http://mummer.sourceforge.net/manual/#nucmer&#34;&gt;NUCmer alignment script&lt;/a&gt;. The format of the delta file is described more &lt;a href=&#34;http://mummer.sourceforge.net/manual/#nucmeroutput&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;readDelta &amp;lt;- function(deltafile) {
    lines = scan(deltafile, &amp;quot;a&amp;quot;, sep = &amp;quot;\n&amp;quot;, quiet = TRUE)
    lines = lines[-1]
    lines.l = strsplit(lines, &amp;quot; &amp;quot;)
    lines.len = lapply(lines.l, length) %&amp;gt;% as.numeric
    lines.l = lines.l[lines.len != 1]
    lines.len = lines.len[lines.len != 1]
    head.pos = which(lines.len == 4)
    head.id = rep(head.pos, c(head.pos[-1], length(lines.l) + 
        1) - head.pos)
    mat = matrix(as.numeric(unlist(lines.l[lines.len == 
        7])), 7)
    res = as.data.frame(t(mat[1:5, ]))
    colnames(res) = c(&amp;quot;rs&amp;quot;, &amp;quot;re&amp;quot;, &amp;quot;qs&amp;quot;, &amp;quot;qe&amp;quot;, &amp;quot;error&amp;quot;)
    res$qid = unlist(lapply(lines.l[head.id[lines.len == 
        7]], &amp;quot;[&amp;quot;, 2))
    res$strand = ifelse(res$qe - res$qs &amp;gt; 0, &amp;quot;+&amp;quot;, &amp;quot;-&amp;quot;)
    res
}

mumgp = readDelta(&amp;quot;../../data/mumplot-example.delta&amp;quot;)

mumgp %&amp;gt;% head %&amp;gt;% kable&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;rs&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;re&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;qs&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;qe&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;error&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;qid&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;strand&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;265577&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;265842&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;108520&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;108254&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;46&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Contig0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;265577&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;265842&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;106438&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;106172&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;46&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Contig0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;306695&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;306968&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;138241&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;138515&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Contig0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1016956&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1017364&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27806&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27394&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;62&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Contig0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1723715&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1723990&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;34123&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;33845&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Contig0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1767531&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1767813&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;33842&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;34123&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Contig0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;+&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;filter-contigs-with-poor-alignments&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Filter contigs with poor alignments&lt;/h2&gt;
&lt;p&gt;For now, I filter contigs simply based on the size of the aligned segment. I keep only contigs with at least one aligned segment larger than a minimum size. Smaller alignment in these contigs are conserved if in the same range than the large aligned segments. Eventually I could also filter segment based on the number/proportion of errors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filterMum &amp;lt;- function(df, minl = 1000, flanks = 10000) {
    coord = df %&amp;gt;% filter(abs(re - rs) &amp;gt; minl) %&amp;gt;% 
        group_by(qid) %&amp;gt;% summarize(qsL = min(qs) - 
        flanks, qeL = max(qe) + flanks, rs = min(rs)) %&amp;gt;% 
        ungroup %&amp;gt;% arrange(desc(rs)) %&amp;gt;% mutate(qid = factor(qid, 
        levels = unique(qid))) %&amp;gt;% select(-rs)
    merge(df, coord) %&amp;gt;% filter(qs &amp;gt; qsL, qe &amp;lt; qeL) %&amp;gt;% 
        mutate(qid = factor(qid, levels = levels(coord$qid))) %&amp;gt;% 
        select(-qsL, -qeL)
}

mumgp.filt = filterMum(mumgp, minl = 10000)
mumgp.filt %&amp;gt;% head %&amp;gt;% kable&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;qid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;rs&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;re&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;qs&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;qe&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;error&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;strand&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Contig1475&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1663946&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1665485&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;331648&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;330113&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;171&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Contig1475&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1662200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1684396&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;126037&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;103837&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;234&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Contig1475&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1581333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1582738&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;244635&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;243233&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;87&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Contig1475&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1597381&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1610746&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;145948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;132626&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;157&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Contig1475&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1610278&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1623358&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;130561&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;117468&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;200&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Contig1475&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1616542&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1618080&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;331648&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;330113&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;146&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;graph&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Graph&lt;/h2&gt;
&lt;p&gt;I’m going for the same style as MUMplot to compare.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mumgp.filt, aes(x = rs, xend = re, y = qs, yend = qe, 
    colour = strand)) + geom_segment() + geom_point(alpha = 0.5) + 
    facet_grid(qid ~ ., scales = &amp;quot;free&amp;quot;, space = &amp;quot;free&amp;quot;, 
        switch = &amp;quot;y&amp;quot;) + theme_bw() + theme(strip.text.y = element_text(angle = 180, 
    size = 5), strip.background = element_blank(), 
    legend.position = c(0.99, 0.01), legend.justification = c(1, 
        0), axis.text.y = element_blank(), axis.ticks.y = element_blank()) + 
    xlab(&amp;quot;reference sequence&amp;quot;) + ylab(&amp;quot;assembly&amp;quot;) + 
    scale_colour_brewer(palette = &amp;quot;Set1&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/Hippocamplus/Hippocamplus/post/2017-09-19-MumplotsWithGgplot2_files/figure-html/graph-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Not bad but it would look nicer if we flipped the contigs to have more or less a diagonal.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;diagonalize&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Diagonalize&lt;/h2&gt;
&lt;p&gt;For each contig, I compute the major strand (strand with most bases aligned) and flip if necessary.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diagMum &amp;lt;- function(df) {
    major.strand = df %&amp;gt;% group_by(qid) %&amp;gt;% summarize(major.strand = ifelse(sum(sign(qe - 
        qs) * abs(qe - qs)) &amp;gt; 0, &amp;quot;+&amp;quot;, &amp;quot;-&amp;quot;), maxQ = max(c(qe, 
        qs)))
    merge(df, major.strand) %&amp;gt;% mutate(qs2 = ifelse(major.strand == 
        &amp;quot;-&amp;quot;, maxQ - qs, qs), qe2 = ifelse(major.strand == 
        &amp;quot;-&amp;quot;, maxQ - qe, qe), qs = qs2, qe = qe2) %&amp;gt;% 
        select(-qe2, -qs2, maxQ)
}

mumgp.filt.diag = diagMum(mumgp.filt)

ggplot(mumgp.filt.diag, aes(x = rs, xend = re, y = qs, 
    yend = qe, colour = strand)) + geom_segment() + 
    geom_point(alpha = 0.5) + facet_grid(qid ~ ., scales = &amp;quot;free&amp;quot;, 
    space = &amp;quot;free&amp;quot;, switch = &amp;quot;y&amp;quot;) + theme_bw() + theme(strip.text.y = element_text(angle = 180, 
    size = 5), strip.background = element_blank(), 
    legend.position = c(0.99, 0.01), legend.justification = c(1, 
        0), axis.text.y = element_blank(), axis.ticks.y = element_blank()) + 
    xlab(&amp;quot;reference sequence&amp;quot;) + ylab(&amp;quot;assembly&amp;quot;) + 
    scale_colour_brewer(palette = &amp;quot;Set1&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/Hippocamplus/Hippocamplus/post/2017-09-19-MumplotsWithGgplot2_files/figure-html/diag-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/Hippocamplus/imgs/mumplot-example.png&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;percent-identity-and-coverage&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Percent identity and coverage&lt;/h2&gt;
&lt;p&gt;Another useful MUMplot represents the position of each aligned segment and its percent similarity.&lt;/p&gt;
&lt;p&gt;This graph could be useful to decide which size/similarity threshold to use when filtering low alignments.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mumgp %&amp;lt;&amp;gt;% mutate(similarity = 1 - error/abs(qe - qs))
mumgp.filt %&amp;lt;&amp;gt;% mutate(similarity = 1 - error/abs(qe - 
    qs))

ggplot(mumgp, aes(x = rs, xend = re, y = similarity, 
    yend = similarity)) + geom_segment() + theme_bw() + 
    xlab(&amp;quot;reference sequence&amp;quot;) + ylab(&amp;quot;similarity&amp;quot;) + 
    ggtitle(&amp;quot;All contigs&amp;quot;) + ylim(0, 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/Hippocamplus/Hippocamplus/post/2017-09-19-MumplotsWithGgplot2_files/figure-html/simgraph-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mumgp.filt, aes(x = rs, xend = re, y = similarity, 
    yend = similarity)) + geom_segment() + theme_bw() + 
    xlab(&amp;quot;reference sequence&amp;quot;) + ylab(&amp;quot;similarity&amp;quot;) + 
    ggtitle(&amp;quot;At least 10 Kbp aligned&amp;quot;) + ylim(0, 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/Hippocamplus/Hippocamplus/post/2017-09-19-MumplotsWithGgplot2_files/figure-html/simgraph-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To better highlighted which region in the reference is covered, I annotate each base of the reference with the maximum similarity.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;maxSimilarityDisjoin &amp;lt;- function(df) {
    ref.ir = GRanges(&amp;quot;X&amp;quot;, IRanges(df$rs, df$re), similarity = df$similarity)
    ## Efficient clean up of low similarity within high
    ## similarity
    step = 1
    while (step &amp;gt; 0) {
        largealign = ref.ir[head(order(rank(-ref.ir$similarity), 
            rank(-width(ref.ir))), step * 1000)]
        ol = findOverlaps(ref.ir, largealign, type = &amp;quot;within&amp;quot;) %&amp;gt;% 
            as.data.frame %&amp;gt;% mutate(simW = ref.ir$similarity[queryHits], 
            simL = largealign$similarity[subjectHits]) %&amp;gt;% 
            filter(simW &amp;lt; simL)
        if (length(largealign) == length(ref.ir)) {
            step = 0
        } else {
            step = step + 1
        }
        ref.ir = ref.ir[-ol$queryHits]
    }
    ## Disjoin and annotate with the max similarity
    ref.dj = disjoin(c(ref.ir, GRanges(&amp;quot;X&amp;quot;, IRanges(min(df$rs), 
        max(df$rs)), similarity = 0)))
    ol = findOverlaps(ref.ir, ref.dj) %&amp;gt;% as.data.frame %&amp;gt;% 
        mutate(similarity = ref.ir$similarity[queryHits]) %&amp;gt;% 
        group_by(subjectHits) %&amp;gt;% summarize(similarity = max(similarity))
    ref.dj$similarity = 0
    ref.dj$similarity[ol$subjectHits] = ol$similarity
    as.data.frame(ref.dj)
}

mumgp.sim = maxSimilarityDisjoin(mumgp)

mumgp.sim %&amp;gt;% select(similarity, start, end) %&amp;gt;% gather(end, 
    pos, 2:3) %&amp;gt;% ggplot() + geom_line(aes(x = pos, 
    y = similarity), alpha = 0.5, color = &amp;quot;red&amp;quot;) + 
    theme_bw() + xlab(&amp;quot;reference sequence&amp;quot;) + ylab(&amp;quot;similarity&amp;quot;) + 
    ggtitle(&amp;quot;All contigs&amp;quot;) + ylim(0, 1) + geom_segment(aes(x = rs, 
    xend = re, y = similarity, yend = similarity), 
    data = mumgp)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/Hippocamplus/Hippocamplus/post/2017-09-19-MumplotsWithGgplot2_files/figure-html/simcov-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mumgp.sim) + geom_segment(aes(x = start, xend = end, 
    yend = similarity, y = similarity), color = &amp;quot;red&amp;quot;, 
    size = 2) + theme_bw() + xlab(&amp;quot;reference sequence&amp;quot;) + 
    ylab(&amp;quot;similarity&amp;quot;) + ylim(0, 1) + geom_segment(aes(x = rs, 
    xend = re, y = similarity, yend = similarity), 
    data = mumgp)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/Hippocamplus/Hippocamplus/post/2017-09-19-MumplotsWithGgplot2_files/figure-html/simcov-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;With this graph we could compare different assemblies or before/after filtering:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mumgp.filt.sim = maxSimilarityDisjoin(mumgp.filt)

mumgp.filt.m = rbind(mumgp.sim %&amp;gt;% mutate(filter = &amp;quot;before&amp;quot;), 
    mumgp.filt.sim %&amp;gt;% mutate(filter = &amp;quot;after&amp;quot;))

mumgp.filt.m %&amp;gt;% select(similarity, start, end, filter) %&amp;gt;% 
    gather(end, pos, 2:3) %&amp;gt;% ggplot(aes(x = pos, y = similarity, 
    colour = filter)) + geom_line(alpha = 0.8) + theme_bw() + 
    xlab(&amp;quot;reference sequence&amp;quot;) + ylab(&amp;quot;similarity&amp;quot;) + 
    ylim(0, 1) + scale_colour_brewer(palette = &amp;quot;Set1&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/Hippocamplus/Hippocamplus/post/2017-09-19-MumplotsWithGgplot2_files/figure-html/simcovcomp-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Not so pretty but we see that a few region are not covered any more after our filtering. Maybe something like this instead :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mumgp.filt.m %&amp;gt;% filter(similarity == 0) %&amp;gt;% ggplot(aes(x = start, 
    xend = end, y = filter, yend = filter)) + geom_segment(size = 10) + 
    theme_bw() + xlab(&amp;quot;reference sequence&amp;quot;) + ylab(&amp;quot;filter&amp;quot;) + 
    scale_colour_brewer(palette = &amp;quot;Set1&amp;quot;) + ggtitle(&amp;quot;Reference regions not covered&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/Hippocamplus/Hippocamplus/post/2017-09-19-MumplotsWithGgplot2_files/figure-html/simcovcomptrack-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Word Cloud in R</title>
          <link>/Hippocamplus/2016/02/26/word-cloud-in-r/</link>
          <pubDate>Fri, 26 Feb 2016 00:00:00 UTC</pubDate>
          <author></author>
          <guid>/Hippocamplus/2016/02/26/word-cloud-in-r/</guid>
          <description>&lt;p&gt;With the &lt;code&gt;wordcloud&lt;/code&gt; package, an example with fake words the command would look like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(wordcloud)
createWords &amp;lt;- function(w.l = 3) paste(sample(letters, 
    w.l, TRUE), collapse = &amp;quot;&amp;quot;)
words = sapply(1:200, function(e) createWords())
freq = c(sample(1:50, 190, T), sample(100:150, 10, 
    T))
freq = freq/sum(freq)
wordcloud(words, freq)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/Hippocamplus/Hippocamplus/post/2016-02-26-wordcloud_files/figure-html/example-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wordcloud(words, freq, colors = sample(c(&amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;), 
    length(words), replace = TRUE), ordered.colors = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/Hippocamplus/Hippocamplus/post/2016-02-26-wordcloud_files/figure-html/example-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
