---
draft: true
title: Enrichment between genomic regions
date: 2017-09-05
tags: ["genome", "stats"]
---

```{r, include=FALSE}
knitr::opts_chunk$set(message=FALSE, warning=FALSE, tidy=TRUE, tidy.opts=list(width.cutoff=50))
```

Testing if two sets of genomic regions overlap significantly is not straightforward.
In the simple situation of regions of 1 bp (e.g. SNVs) we could use a hypergeometric test.
When the regions are small enough and there are not too many, the hypergeometric test might be a fair approximation as well.

But what about annotations with many regions, of variable size, covering the genome ?
For example overlapping genes and repeats ?

```{r}
library(ggplot2)
library(dplyr)
library(magrittr)
library(broom)
library(knitr)
library(tidyr)
```

## Simulated data

In a very simple scenario of having only one chromosome of size 250 Mbp.

First let's create a function that draw random regions (ranges) in this chromosome.

```{r simfun}
library(IRanges)
randRegions <- function(sizes, max.pos=25e7, max.iter=10){
  gr = IRanges(runif(length(sizes), 0, max.pos-sizes), width=sizes)
  dup = which(countOverlaps(gr, gr)>1)
  iter = 1
  while(iter <= max.iter & length(dup)>0){
    gr[dup] = IRanges(runif(length(dup), 0, max.pos-sizes[dup]), width=sizes[dup])
    dup = which(countOverlaps(gr, gr)>1)
  }
  return(gr)
}
```

Now some regions will be our "repeats": 10,000 regions from size 10 bp to 6 Kbp.

```{r rep, cache=TRUE}
rep.r = randRegions(runif(1e4, 10,6000))
sum(width(rep.r)) / 25e7
```

They cover `r round(100*sum(width(rep.r))/25e7, 2)`% of the chromosome.

The hypergeometric test is applied as if we were sampling bases in the genome and testing if it was covered by a repeat.
In that sense, we expect `r round(100*sum(width(rep.r))/25e7, 2)`% of our regions to overlap a repeat.

```{r testhg, cache=TRUE, dependson="rep"}
testHG <- function(feat.r, nb=1000, size=1, nb.test=3000, total.b = 25e7){
  exp.b = sum(width(feat.r))
  sapply(1:nb.test, function(ii){
    reg.r = randRegions(rep(size, nb))
    obs.ol = sum(overlapsAny(reg.r, feat.r))
    phyper(obs.ol, exp.b, total.b-exp.b, length(reg.r), lower.tail=FALSE)
  })
}

ht.sim = rbind(data.frame(nb=1000, size=1, pv=testHG(rep.r, 1000, 1)),
               data.frame(nb=1000, size=1000, pv=testHG(rep.r, 1000, 1000)),
               data.frame(nb=100, size=1000, pv=testHG(rep.r, 100, 1000)),
               data.frame(nb=1000, size=100, pv=testHG(rep.r, 1000, 100)))

ht.sim %>% mutate(nbsize=paste0(nb, ' x ', size, 'bp')) %>% group_by(nbsize) %>% arrange(pv) %>% mutate(cumprop=(1:n())/n()) %>% ggplot(aes(x=pv, y=cumprop, color=nbsize)) + geom_line() + theme_bw() + geom_abline(linetype=2) + ylab('cumulative proportion') + xlab('P-value') + scale_color_brewer(palette='Set1', name='regions') + theme(legend.justification=c(1,0), legend.position=c(.99,.01))
```

As expected, the hypergeometric test works well for region of 1 bp.
Otherwise the distribution of the P-values is biased.
The larger the regions the stronger the bias.
To a lower extent, more regions has means more bias.

## Using control regions with similar features

We want to control for the size distribution and the total number of regions tested.
By drawing random regions in the genome with the same sizes we can then apply a logistic regression.

```{r contreg, cache=TRUE, dependson="rep"}
testLR <- function(feat.r, nb=1000, size=1, nb.test=3000){
  sapply(1:nb.test, function(ii){
    reg.r = randRegions(rep(size, nb))
    cont.r = randRegions(width(reg.r))
    df = rbind(data.frame(region=TRUE, ol = overlapsAny(reg.r, feat.r)),
               data.frame(region=FALSE, ol = overlapsAny(cont.r, feat.r)))
    pvs = glm(ol~region, data=df, family=binomial()) %>% tidy %>% .$p.value
    pvs[2]
  })
}

lr.sim = rbind(data.frame(nb=1000, size=1, pv=testLR(rep.r, 1000, 1)),
               data.frame(nb=1000, size=1000, pv=testLR(rep.r, 1000, 1000)),
               data.frame(nb=100, size=1000, pv=testLR(rep.r, 100, 1000)),
               data.frame(nb=1000, size=100, pv=testLR(rep.r, 1000, 100)))

lr.sim %>% mutate(nbsize=paste0(nb, ' x ', size, 'bp')) %>% group_by(nbsize) %>% arrange(pv) %>% mutate(cumprop=(1:n())/n()) %>% ggplot(aes(x=pv, y=cumprop, color=nbsize)) + geom_line() + theme_bw() + geom_abline(linetype=2) + ylab('cumulative proportion') + xlab('P-value') + scale_color_brewer(palette='Set1', name='regions') + theme(legend.justification=c(1,0), legend.position=c(.99,.01))
```

Much better.

## Controlling for correlated features

```{r contfeat, cache=TRUE, dependson="rep"}
corRegions <- function(sizes, feat.r, or=2, max.iter=10, max.pos=25e7){
  reg.r = randRegions(sizes)
  for(ii in 1:or){
    reg.r = c(reg.r[overlapsAny(reg.r, feat.r)], randRegions(sizes))
  }
  dup = which(countOverlaps(reg.r, reg.r)>1)
  sizes = width(reg.r)
  iter = 1
  while(iter <= max.iter & length(dup)>0){
    reg.r[dup] = IRanges(runif(length(dup), 0, max.pos-sizes[dup]), width=sizes[dup])
    dup = which(countOverlaps(reg.r, reg.r)>1)
  }
  reg.r
}

repcor.r = corRegions(rep(10000, 1000), rep.r)
cont.r = randRegions(width(repcor.r))
df = rbind(data.frame(region=TRUE, ol = overlapsAny(repcor.r, rep.r)),
           data.frame(region=FALSE, ol = overlapsAny(cont.r, rep.r)))
glm(ol~region, data=df, family=binomial()) %>% tidy %>% kable

repcor2.r = corRegions(rep(10000, 1000), rep.r)
cont.r = randRegions(width(repcor2.r))
df = rbind(data.frame(region=TRUE, ol = overlapsAny(repcor2.r, rep.r)),
           data.frame(region=FALSE, ol = overlapsAny(cont.r, rep.r)))
glm(ol~region, data=df, family=binomial()) %>% tidy %>% kable

seed.r = randRegions(rep(10000, 6000))
seed.ol = overlapsAny(seed.r, repcor.r)
repcorcor.r = c(seed.r[seed.ol], seed.r[head(which(!seed.ol), sum(!seed.ol)*.05)])
cont.r = randRegions(width(repcorcor.r))
df = rbind(data.frame(region=TRUE, ol = overlapsAny(repcorcor.r, rep.r), repcor = overlapsAny(repcorcor.r, repcor.r)),
           data.frame(region=FALSE, ol = overlapsAny(cont.r, rep.r), repcor = overlapsAny(cont.r, repcor.r)))
glm(ol~region, data=df, family=binomial()) %>% tidy %>% kable
glm(ol~region+repcor, data=df, family=binomial()) %>% tidy %>% kable
```

Another approach is to control the feature overlap in the control regions.

```{r, cache=TRUE, dependson="rep"}
randRegionsCons <- function(reg.r, feat.r, nb.seed=1e6){
  seed.r = randRegions(rep(1, nb.seed))
  dist.df = distanceToNearest(seed.r, feat.r) %>% as.data.frame
  reg.ol = overlapsAny(reg.r, feat.r)
  res.r = lapply(unique(width(reg.r)), function(size){
    size.ii = which(width(reg.r)==size)
    res.r = IRanges()
    if(sum(reg.ol[size.ii])>0){
      seed.ii = dist.df %>% filter(distance<size/2) %>% .$queryHits %>% sample(sum(reg.ol[size.ii]))
      res.r = c(res.r, resize(seed.r[seed.ii], size, fix='center'))
    }
    if(sum(!reg.ol[size.ii])>0){
      seed.ii = dist.df %>% filter(distance>size/2) %>% .$queryHits %>% sample(sum(!reg.ol[size.ii]))
      res.r = c(res.r, resize(seed.r[seed.ii], size, fix='center'))
    }
    res.r
  })
  do.call(c, res.r)
}

seed.r = randRegions(rep(10000, 6000))
seed.ol = overlapsAny(seed.r, repcor.r)
repcorcor.r = c(seed.r[seed.ol], seed.r[head(which(!seed.ol), sum(!seed.ol)*.05)])
cont.r = randRegions(width(repcorcor.r))
df = rbind(data.frame(region=TRUE, ol = overlapsAny(repcorcor.r, rep.r), repcor = overlapsAny(repcorcor.r, repcor.r)),
           data.frame(region=FALSE, ol = overlapsAny(cont.r, rep.r), repcor = overlapsAny(cont.r, repcor.r)))
glm(ol~region, data=df, family=binomial()) %>% tidy %>% kable

contSize.r = randRegionsCons(repcorcor.r, repcor.r)
df = rbind(data.frame(region=TRUE, ol = overlapsAny(repcorcor.r, rep.r), repcor = overlapsAny(repcorcor.r, repcor.r)),
           data.frame(region=FALSE, ol = overlapsAny(contSize.r, rep.r), repcor = overlapsAny(contSize.r, repcor.r)))
glm(ol~region, data=df, family=binomial()) %>% tidy %>% kable

mean(overlapsAny(repcorcor.r, repcor.r))
mean(overlapsAny(cont.r, repcor.r))
mean(overlapsAny(contSize.r, repcor.r))

mean(overlapsAny(repcorcor.r, rep.r))
mean(overlapsAny(cont.r, rep.r))
mean(overlapsAny(contSize.r, rep.r))
```

Controlling within the logistic regression or using better control regions. What's best ? Power analysis.


## Comparing different sets

What if we need to compare two sets of regions with a third one.
If the two sets are comparable in term of size and total number we could directly compare the overlap or an enrichment estimate (e.g. model estimate).
If they are not both might be enriched but the estimates may not be directly comparable.
Even the P-value might be affected by the difference in size/number between the two sets.
What should we compare ? 

A practical example would be two catalogs of CNVs, say from two different methods, that we want to compare to a functional annotation.
If say one catalogs has more CNVs, or has larger CNVs, how can we say which one overlaps the best with the functional annotation ?

```{r, cache=TRUE}
fun.r = randRegions(rep(10, 30000))

cnv.sm = randRegions(rep(1000, 1000))
cnv.lg = randRegions(rep(10000, 1000))
mean(overlapsAny(cnv.sm, fun.r))
mean(overlapsAny(cnv.lg, fun.r))

testLR <- function(reg.r, feat.r){
  cont.r = randRegions(width(reg.r))
  df.sm = rbind(data.frame(region=TRUE, ol = overlapsAny(reg.r, feat.r)),
                data.frame(region=FALSE, ol = overlapsAny(cont.r, feat.r)))
  rbind(data.frame(term='fold-change', estimate=mean(overlapsAny(reg.r, feat.r))/mean(overlapsAny(cont.r, feat.r)), p.value=NA),
        data.frame(term='diff-change', estimate=mean(overlapsAny(reg.r, feat.r))-mean(overlapsAny(cont.r, feat.r)), p.value=NA),
        glm(ol~region, data=df.sm, family=binomial()) %>% tidy %>% select(term, estimate, p.value))
}

null.df = lapply(1:1000, function(ii){
  cnv.sm = randRegions(rep(1000, 1000))
  cnv.lg = randRegions(rep(10000, 1000))
  rbind(testLR(cnv.sm, fun.r) %>% mutate(region='cnv.sm', rep=ii),
        testLR(cnv.lg, fun.r) %>% mutate(region='cnv.lg', rep=ii))
})

null.df = do.call(rbind, null.df)
null.df %>% filter(term=='regionTRUE') %>% select(rep, estimate, region) %>% spread(region, estimate) %>% ggplot(aes(x=cnv.sm, y=cnv.lg)) + geom_point(alpha=.5) + theme_bw()
null.df %>% filter(term=='regionTRUE') %>% ggplot(aes(x=estimate, colour=region)) + geom_density() + theme_bw()
null.df %>% filter(term=='fold-change') %>% ggplot(aes(x=estimate, colour=region)) + geom_density() + theme_bw()
null.df %>% filter(term=='diff-change') %>% ggplot(aes(x=estimate, colour=region)) + geom_density() + theme_bw()

asso.df = lapply(1:1000, function(ii){
  cnv.sm = randRegions(rep(1000, 1000))
  cnv.lg = randRegions(rep(10000, 1000))
  cnv.sm = c(cnv.sm[overlapsAny(cnv.sm, fun.r)], randRegions(rep(1000, 1000)))
  cnv.lg = c(cnv.lg[overlapsAny(cnv.lg, fun.r)], randRegions(rep(10000, 1000)))
  rbind(testLR(cnv.sm, fun.r) %>% mutate(region='cnv.sm', rep=ii),
        testLR(cnv.lg, fun.r) %>% mutate(region='cnv.lg', rep=ii))
})

asso.df = do.call(rbind, asso.df)
asso.df %>% filter(term=='regionTRUE') %>% select(rep, estimate, region) %>% spread(region, estimate) %>% ggplot(aes(x=cnv.sm, y=cnv.lg)) + geom_point(alpha=.5) + theme_bw()
asso.df %>% filter(term=='regionTRUE') %>% ggplot(aes(x=estimate, colour=region)) + geom_density() + theme_bw()
asso.df %>% filter(term=='fold-change') %>% ggplot(aes(x=estimate, colour=region)) + geom_density() + theme_bw() + geom_vline(xintercept=1)
asso.df %>% filter(term=='diff-change') %>% ggplot(aes(x=estimate, colour=region)) + geom_density() + theme_bw() + geom_vline(xintercept=0)

asso2.df = lapply(1:1000, function(ii){
  cnv.sm = randRegions(rep(1000, 1000))
  cnv.lg = randRegions(rep(10000, 1000))
  cnv.sm = c(cnv.sm[overlapsAny(cnv.sm, fun.r)], randRegions(rep(1000, 1000)))
  cnv.lg = c(cnv.lg[overlapsAny(cnv.lg, fun.r)], randRegions(rep(10000, 1000)))
  cnv.sm = c(cnv.sm[overlapsAny(cnv.sm, fun.r)], randRegions(rep(1000, 1000)))
  cnv.lg = c(cnv.lg[overlapsAny(cnv.lg, fun.r)], randRegions(rep(10000, 1000)))
  rbind(testLR(cnv.sm, fun.r) %>% mutate(region='cnv.sm', rep=ii),
        testLR(cnv.lg, fun.r) %>% mutate(region='cnv.lg', rep=ii))
})

asso2.df = do.call(rbind, asso2.df)
asso2.df %>% filter(term=='regionTRUE') %>% select(rep, estimate, region) %>% spread(region, estimate) %>% ggplot(aes(x=cnv.sm, y=cnv.lg)) + geom_point(alpha=.5) + theme_bw()
asso2.df %>% filter(term=='regionTRUE') %>% ggplot(aes(x=estimate, colour=region)) + geom_density() + theme_bw()
asso2.df %>% filter(term=='fold-change') %>% ggplot(aes(x=estimate, colour=region)) + geom_density() + theme_bw() + geom_vline(xintercept=1)
asso2.df %>% filter(term=='diff-change') %>% ggplot(aes(x=estimate, colour=region)) + geom_density() + theme_bw() + geom_vline(xintercept=0)
```
